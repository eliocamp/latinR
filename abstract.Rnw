\documentclass[runningheads]{llncs}
\usepackage{graphicx}
\usepackage[utf8]{inputenc}
\usepackage[spanish]{babel}
\usepackage{xspace}
\newcommand{\mytilde}{\lower.80ex\hbox{\char`\~}\xspace}    


\begin{document}

\title{metR - Visualización y manejo de campos meteorológicos}

%\titlerunning{Abbreviated paper title}
% If the paper title is too long for the running head, you can set
% an abbreviated paper title here
%
\author{Elio Campitelli}

%
\authorrunning{E. Campitelli}
% First names are abbreviated in the running head.
% If there are more than two authors, 'et al.' is used.
%
\institute{Centro de Investigaciones del Mar y la Atmósfera - CONICET\\
\email{elio.campitelli@cima.fcen.uba.ar}\\
%\url{http://www.springer.com/gp/computer-science/lncs}
}
%
\maketitle              % typeset the header of the contributions
%
% \begin{abstract}
\keywords{meteorología \and tidy data \and visualización de datos}
% \end{abstract}


<<setup, echo = FALSE, include = FALSE>>=
knitr::opts_chunk$set(cache = TRUE,
                      message = FALSE,
                      warning = FALSE,
                      fig.width = 4)
knitr::opts_knit$set(self.contained = FALSE)

knitr::write_bib(c("base", "data.table", "ggplot2", "metR"), 
                 file = "packages.bib")

hook_source = knit_hooks$get('source')
knit_hooks$set(source = function(x, options) {
   txt = hook_source(x, options)
   # extend the default source hook
   gsub('~', '\\\\mytilde', txt)
})


library(metR)
library(data.table)
library(ggplot2)
library(dplyr)
library(purrr)
data(geopotential)
geopotential <- copy(geopotential)

# Opciones estéticas de ggplot2 que sirven al graficar campos escalares. 
theme_field <- function(w = 4) {
   theme(legend.position = "bottom", legend.box = "vertical",
         legend.key.width = unit(w, "lines"),
         panel.grid = element_line(color = "gray20", size = 0.2, linetype = 3),
         panel.ontop = TRUE
   )
}

# Mapa.
map <- map_data("legacy_world2")
geom_map <- geom_path(data = map, aes(long, lat, group = group), color = "black", size = 0.2) 
@

Gran parte de la investigación en ciencias de la atmósfera consiste en el análisis y visualización de datos. Uno de los softwares de visualización de datos más utilizado por la comunidad meteorológica y oceanográfica es GrADs (Grid Analysis and Display System), el cual permite leer y graficar campos escalares y vectoriales con gran facilidad. Sin embargo, su lenguaje de scripting es muy limitado, carece de capacidades estadísticas nativas y no existen gran cantidad de extensiones que las implementen. R, en cambio, posee implementaciones de virtualmente cualquier tratamiento estadístico usado en ciencias de la atmósfera. Sin embargo, con el paquete \texttt{raster} --el más usado para leer y graficar datos geográficos-- los datos quedan relativamente ocultos detrás de una estructura opaca que no facilita la interacción con otros paquetes; en particular, no es posible graficarlos utilizando \texttt{ggplot2}. 

La finalidad de \texttt{metR} es proveer facilidades en la lectura, manejo y visualización de datos meteorológicos en R utilizando estructuras comunes soportadas por la mayoría de los paquetes, de manera de poder beneficiarse de los aportes de la comunidad. Hace fuerte uso de \texttt{data.table} por su eficiencia en uso de memoria y velocidad (importante dada la gran cantidad de datos que suelen usarse en meteorología), y en \texttt{ggplot2} por su flexibilidad y facilidad en la creación de gráficos. 

En su extensión de \texttt{ggplot2}, \texttt{metR} provee \texttt{geoms} para graficar contornos llenos, contornos de Tanaka, líneas de corriente, vectores y mapas de relieve, y escalas específicas que facilitan la creación de mapas y cortes verticales. En lo que refiere a manejo de datos, provee funciones para lectura datos desde archivos NetCDF directamente en \texttt{data.frames}, cálculo de valores principales, imputación de datos faltantes, transformada de Fourier y derivadas. Además, tiene funciones específicas de física atmosférica, como la ley de gases ideales, relaciones de procesos adiabáticos, presión de saturación del vapor de agua, fuerza de coriolis y otros.

\texttt{metR} está en estado experimental y de activo desarrollo, tanto en crecimiento de funcionalidad como en refinamiento de interfaces y corrección de errores. Como todo proyecto de código abierto, es deseable además que a medida que sea adoptado por la comunidad, surgan nuevos casos de uso que incentiven su evolución más allá de las necesidades personales de un sólo desarrollador.

\textbf{Ejemplo}. Se calculan las anomalías temporales para cada puntos de grilla y calcular el campo asociado a la primera componente principal para cada mes. Finalmente, se calcula el viento geostrófico correspondiente a ese campo. Todo este proceso toma unas pocas líneas de código y se integra sin esfuerzo en el \emph{workflow} de \texttt{data.table}. 

<<data1>>=
geopotential[, gh.t := Anomaly(gh), by = .(lon, lat, month(date))]
geopotential[, gh.t.w := gh.t*sqrt(cos(lat*pi/180))]
eof <- geopotential[, EOF(gh.t.w ~ date | lon + lat, n = 1)$right, 
                    by = month(date)]
eof[, c("u", "v") := GeostrophicWind(gh.t.w, lon, lat), by = month]
@

Luego, se grafica el campo de geopotencial con contornos llenos de manera que haya una relación uno a uno entre los niveles graficados y los señalados en la escala de colores. El campo de movimiento, por su parte, se grafica con líneas de corriente. 

<<example-plot, fig.cap = "Anomalía de altura geopotencial media en contornos llenos (mgp) y viento geostrófico en líneas de corriente.", fig.height = 3.5, fig.width = 7.5>>=
binwidth <- 0.01
ggplot(eof[month %in% 1], aes(lon, lat)) +
   geom_contour_fill(aes(z = gh.t.w), circular = "x", 
                     breaks = AnchorBreaks(0, binwidth, 0)) +
   geom_streamline(aes(dx = dlon(u, lat), dy = dlat(v)), L = 30, 
                   skip = 2, circular = "x") +
   scale_fill_divergent(breaks = AnchorBreaks(0, binwidth, 0), 
                        guide = "colorstrip", name = "") +
   scale_y_latitude(ticks = 15) + scale_x_longitude() + geom_map +
   coord_quickmap(xlim = c(0, 360), ylim = c(-90, -20)) +
   theme_minimal() + theme_field()
@


% \section{Limitaciones}
% 
% El uso de `data.table`s para el manejo de datos implica una importante limitación para \texttt{metR}. Muchas aplicaciones meteorológicas hacen uso de cantidades de datos que resultan imposibles cargar en memoria RAM en la mayoría de las computadoras personales. \texttt{metR} tampoco puede manejar campos que no se encuentren en en grillas regulares o en grillas proyectadas. En ambos casos paquetes como \texttt{raster} y \texttt{rasterVis} son indispensables. 
% 



\end{document}
